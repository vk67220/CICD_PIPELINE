--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Jenkins + Maven + GitHub + Tomcat Integration - Project
2. Jenkins Pipeline - Concept & Project

GitHub: https://github.com/KastroVKiran/maven-web-app-kastro1.git
Tasks:
---------------
========
Part 1
========
1. Create an EC2 Instance (Amazon Linux 2 AMI) - Connect to the instance using MobaXTerm Tool.
----------------------------------------------------------
Installation of Jenkins on EC2 Instance:
----------------------------------------------------------
***********
Part 1
***********
1. Launch and Connect to the Instance (Amazon Linux 2 AMI, t2.micro, 20 GB) using MobaXTerm

2. Become Root User
sudo su
cd (You will see only IP of Instance)
sudo yum update -y

https://www.jenkins.io/doc/tutorials/tutorial-for-installing-jenkins-on-AWS/
(Latest commands to install Jenkins in Amazon Linux 2023 instance)

3. Add Jenkins repo. to our YUM repo:
sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo

4. Import a key-file from Jenkins-CI to enable the installation from package:
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum upgrade

5. Installing Java
sudo yum install java-17-amazon-corretto-headless
java -version

6. Install Jenkins:
sudo yum install jenkins -y

7. Lets start, enable, and check the status of Jenkins
sudo systemctl enable jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins

You should see "Active & Running" in Green Colour, which means the Jenkins Service is successfully installed.

Note: To remove jenkins: sudo yum remove jenkins


By default, the Jenkins tool will run on Port No. 8080
Enable Port No. 8080 for the EC2 Instance inorder to access Jenkins Tool.
Check Instance ----> Security ----> Click on link below the Security Group ----> Add Rule ----> Custom TCP, Port No. 8080 ----> Save Rules.
Access Jenkins: <public ip>:8080

Get the administration password
cat <Paste the red code visible while accessing jenkins in browser> and execute in MobaXTerm

Copy the code visible in MobaXTerm and Paste in Notepad
8f39e64834e34e3ba2e6b0ef55695ea0

Paste the above code in Jenkins Browser under "Administrative Password"

Click on "Install Suggested Plugins"

Create First Admin User

Provide Username, Password, Full Name, and Email

Save and Continue

Copy the Jenkins URL and Paste in Notepad
http://3.135.249.138:8080/

Save and Finish

Click on "Start Using Jenkins"
========
Part 3
========
TOMCAT WEBSERVER INSTALLATION ON LINUX EC2 INSTANCE
https://tomcat.apache.org/download-90.cgi ----> Downloads ----> Tomcat 9 ----> Copy the link of tar.gz file ----> https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.73/bin/apache-tomcat-9.0.73.tar.gz ----> sudo wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.73/bin/apachetomcat-9.0.73.tar.gz ----> ls -l ----> You will the tomcat file in red colour. This is a tar.gz file and we have to extract the tar.gz file ----> tar -xvf <enter the name of tomcat file in red colour> ----> All the files will get extracted ----> ls -l ----> You will see the list of extracted files ---> cd <enter the name of tomcat file in blue colour>

Lets start the tomcat server:
Inorder to start the tomcat server, we need a file called "startup.sh"
This "startup.sh" file will be there in "bin" folder ----> cd bin ----> ls -l ----> you will see startup.sh file ----> ./startup.sh ----> You will see "Tomcat Started"
Lets access the tomcat server:
Since, the tomcat also runs on Port No. 8080, we cannot access tomcat as on the same port no. jenkins is also running.
Now, we have to change the Port No. of Tomcat. (Tomcat Port No. 9090)

How to change the port no. of Tomcat?
------------------------------------------------------
In order to change the port no. of Tomcat, we will configure a file known as "server.xml" This server.xml file will be available in "conf" folder.
cd .. ----> pwd ----> /home/ec2-user/apache-tomcat-9.0.73 ----> ls -l ----> cd conf ----> ls -l ----> you will see server.xml file ----> vi server.xml ----> scroll down till you see "connector port=8080" ----> press "i" ----> Change the port no to 9090 instead of 8080 ----> escape ---->
:wq

Check the Tomcat accessibility. By default the Tomcat will also run on Port No. 8080. But on the same port no. jenkins is also running.

So we have to add the port no. to 9090 in ec2 instance to access Tomcat:
"Check" the instance ----> Security ----> Click on the link under SGs ----> Add Rules ----> Custom TCP, 9090, AnywhereIPv4 ----> Save Rules.
Shutdown the tomcat server ----> cd bin ----> ./shutdown.sh ----> ./startup.sh

Open new tab: <Paste the Public IP of Instance>:9090 ----> You will see the Tomcat Home Page
Go to browser and check for tomcat accessibility. You are now able to access Tomcat and Jenkins in the same instance.
Here we can access only the Home page of Tomcat.

Inorder to access complete tomcat server, we need to do the configuration in "context.xml" file. 
apache-tomcat-9.0.73/webapps/manager/META-INF/context.xml

cd apache-tomcat-9.0.73/webapps/manager/META-INF/context.xml ----> vi context.xml ----> You will see a "valve" tag. You have to edit "Allow" tag ----> ".*" />

Configuring the Users in Tomcat
---------------------------------------------
we need to edit the tomcat-users.xml to configure the users. The "tomcat-users.xml" file is available in "conf" folder
<role rolename="manager-gui" />
<user username="tomcat" password="tomcat" roles="manager-gui" />
<role rolename="admin-gui" />
<user username="admin" password="admin" roles="manager-gui,admin-gui"/>

cd bin
./shutdown.sh
./startup.sh

Access Tomcat on Browser ----> Click on Server Status ----> Enter the username (admin) and password (admin)

Install git on VM
---------------------------------
Install GIT in EC2 Instance where Jenkins is running
sudo yum install git -y

Jenkins Port No.: 8080
Tomcat Port No.: 9090

========
Part 4
========
Inorder to do the automation, Jenkins is going to execute some script to deploy the war file into the Tomcat Webserver.
___________________________________________________________
Step 1: Adding the manager-script role in tomcat-users.xml file
___________________________________________________________
In order to do the automation, Tomcat user should have a "manager-script" permission. There should be one user in the Tomcat with the "manager-script" permission. Then with that user credentials we can automate the deployment process.

Goto MobaXTerm and Connect to the Instance ----> ls -l ----> cd apache-tomcat-9.0.73 ----> ls -l ----> cd conf ----> ls -l ----> You can see tomcat-users.xml ----> vi tomcat-users.xml ----> Scroll down till you see "role rolename="manager-gui"", go to the last but-one line and type the below
<role rolename="manager-script" /> 
Goto the last line of "user username="admin"", and type manager-script at the last, just before inverted quotations ----> esc ----> :wq
___________________________________________________________
Step 2: Installing "deploy to container" plugin in Jenkins software
___________________________________________________________
Jenkins Dashboard ----> Manage Jenkins ----> Plugins ----> Available Plugins ----> In the search bar, type 'deploy to container' and check the same ----> Click on "Install without restart" ----> Click on "Go back to the top page".
___________________________________________________________________________
Step 3: Creating a Jenkins job and for that Jenkins job we will give permission to deploy
___________________________________________________________________________
Add JDK, GIT, MAVEN in Jenkins Browser Page by going into Tools Configuration
Repo URL:
https://github.com/KastroVKiran/maven-web-app-kastro1.git
Fork the above repository to your GitHub account

========
Part 5
========
1) Create Jenkins Job
-> New Item.
-> Enter Item Name (Job Name) Name: git-maven-tomcat-integration
-> Select Free Style Project & Click OK
-> Enter some description
-> Go to "Source Code Management" Tab and Select "Git"
-> Enter Project "Git Repo URL" i.e https://github.com/KastroVKiran/maven-web-app-kastro1.git
Branch name: */main
-> Go to "Build Triggers" tab. Here i will trigger the job manually.
-> Go to "Build Steps" tab
- Click on Add Build Step and Select 'Inovke Top Level Maven Targets'
-> Select Maven and enter goals
- Maven Version: Maven-3.9.6
- Goals: clean package
-> Click on 'Post Build Action' and Select 'Deploy war/ear to container' option
-> Give path of war file (You can give like this also : **/*.war )
-> Enter Context Path (give project name Ex: java_web_app)
-> Click on 'Add Container' and select Tomcat version 9.x
-> Credentials ---> Click on "Add" ---> A dia ---> Username: admin, Password: admin, ID: Tomcat-Credentials, Description: tomcat
credentials ---> Add
-> Credentials ---> Select "Tomcat-Credentials"
-> Enter Tomcat Server URL (http://ec2-vm-public-ip:tomcat-server-port)
-> Click on Apply and Save

Note: To do any edits to the job, click on "Configure" and edit accordingly

2) Run the job now using 'Build Now' option and see see 'Console Output' of job
3) Once Job Executed successfully, go to tomcat server dashboard and see application should be displayed.
4) Goto Tomcat browser and click on "maven-web-app" Click on the application name (it should display application)
For ex, assume that i have modified the code in github repo; does the changes gets reflected in our app? Lets see

Goto repo https://github.com/ashokitschool/maven-web-app.git ---> src/main/webapp/index.jsp ---> Change the code accordingly ---> Commit changes ---> Goto Tomcat browser and reload ---> You dont see any changes.

So what we need to do is; we need to rebuild the job ---> Goto Jenkins UI ---> Build Now ---> Goto Tomcat Browser ---> Refresh the page ---> You will see the changes. But here there is a problem, whenever there is a code change, how DevOps engineers knows it?

So, here we need to do automation in such that, whenever there is a change in the code in GitHub repo, automatically those changes should reflect in the app. Lets do that.
Jenkins UI ---> Configure ---> Build triggers ---> Poll SCM ---> Schedule: * * * * * ---> Apply ---> Save

Goto repo ---> src/main/webapp/index.jsp ---> In the place of version, keep your name ---> Commit changes ---> Goto Tomcat browser and reload ---> You see changes now (wait for a minute)

Goto Jenkins UI ---> You will see the next build triggered automatically.

This is called Continuous Integration and Continuous Deployment
Do again some changes in repo. and look for changes in app browser tab


In Jenkins we can create 2 types of jobs;
1. Freestyle project 
2. Pipeline

Jenkins pipeline is also called as PaaC (Pipeline as a  Code)
Pipeline is a single platform where we are going to run the entire code as a pipeline

Pipeline ----> Sequential execution of jobs
10.00 AM ---
11.30 PM ----- 7.00 AM --- 8.00 AM --- 8.30 AM --- 9.00 AM --- 9.50 AM

In Jenkins we can write the pipeline in 2 ways;
1. Declarative pipeline
1.1. Recent and advanced style of writing the pipeline script
1.2. Syntax and structure are very important
1.3. Mostly suitable for complex and large scale projects
1.4. It supports code validation
1.5. Easy to read and manage

2. Scripted pipeline
2.1. Oldest
2.2. Groovy language
2.3. It is based on DSL (Domain Specific Language)
2.4. Hard to read and manage

Declarative Pipeline;
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                echo 'Building the application...'
                // Add build steps here
            }
        }
        stage('Test') {
            steps {
                echo 'Running tests...'
                // Add test steps here
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying application...'
                // Add deploy steps here
            }
        }
    }
}


Scripted pipeline;
node {
    stage('Build') {
        echo 'Building the application...'
        // Add build steps here
    }
    stage('Test') {
        echo 'Running tests...'
        // Add test steps here
    }
    stage('Deploy') {
        echo 'Deploying application...'
        // Add deploy steps here
    }
}


Declarative pipeline stages/Way of writing declarative pipeline;
P - pipeline
A - Agent
S - Stages
S - Steps

Usually in real-time, in every project repo we will have a file which is called as JENKINS FILE.
Inside the Jenkins file, we will have the pipeline script

Netflix App - Pipeline Project
--------------------------------------
Stage 1 - Get the code from repo
Stage 2 - Build and package the code
Stage 3 - Deploy the code to server

Repo URL: https://github.com/KastroVKiran/Netflix-Pipeline-Project.git


pipeline {
    agent any

    tools {
        maven 'maven3' // Ensure 'maven3' is configured in Jenkins Global Tool Configuration
    }

    stages {
        stage('Clone the Code') {
            steps {
                git 'https://github.com/KastroVKiran/Netflix-Pipeline-Project.git'
            }
        }
        
        stage('Maven Build') {
            steps {
                sh 'mvn clean package -T 1C -DskipTests'
            }
        }
    }
}


Script:
Pipeline - Stage 1 & Stage 2
----------------------------------------
pipeline {
    agent any

    tools {
        maven 'maven3'
    }

    stages {
        stage('Clone the Code') {
            steps {
                git 'https://github.com/KastroVKiran/Netflix-Pipeline-Project.git'
            }
        }
        stage('Maven Build') {
            steps {
                script {
                    def mavenHome = tool name: 'maven3', type: 'maven'
                    def mavenCMD = "${mavenHome}/bin/mvn"
                    // Run Maven build with parallel execution and skip tests if needed
                    sh "${mavenCMD} clean package -T 1C -DskipTests"
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up after build...'
            cleanWs() // Clean workspace after build
        }
    }
}

Pipeline - Stage 1 & Stage 2 & Stage 3
--------------------------------------------------
Note: Before writing stage 3, run the below commands in MobaXTerm
sudo visudo

Note: #Add the following line at the end of the file, assuming the Jenkins user is 'jenkins'
jenkins ALL=(ALL) NOPASSWD: /bin/cp


pipeline {
    agent any

    tools {
        maven 'maven3'
    }

    stages {
        stage('Clone the Code') {
            steps {
                git 'https://github.com/KastroVKiran/Netflix-Pipeline-Project.git'
            }
        }
        stage('Maven Build') {
            steps {
                script {
                    def mavenHome = tool name: 'maven3', type: 'maven'
                    def mavenCMD = "${mavenHome}/bin/mvn"
                    // Run Maven build with parallel execution and skip tests if needed
                    sh "${mavenCMD} clean package -T 1C -DskipTests"
                }
            }
        }
        stage('Deploy Stage') {
            steps {
                script {
                    // Ensure target directory exists before copying
                    sh 'ls -l target'
                    // Deploy the WAR file to Tomcat
                    sh 'sudo cp target/NETFLIX-1.2.2.war /root/apache-tomcat-9.0.98/webapps'
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up after build...'
            cleanWs() // Clean workspace after build
        }
    }
}


Same but few changes

*****************************************
1. Pipeline Project
*****************************************
Note: Make sure to install tomcat in /home/ec2-user path
Note: Install deploy to container, pipeline stage view plugins
Note: Configure Java and Maven in Jenkins
Note: Install git in VM

Final Script;
Script:
Pipeline - Stage 1 & Stage 2
----------------------------------------
pipeline {
    agent any

    tools {
        maven 'maven3'
    }

    stages {
        stage('Clone the Code') {
            steps {
                git 'https://github.com/KastroVKiran/Netflix-Pipeline-Project.git'
            }
        }
        stage('Maven Build') {
            steps {
                script {
                    def mavenHome = tool name: 'maven3', type: 'maven'
                    def mavenCMD = "${mavenHome}/bin/mvn"
                    // Run Maven build with parallel execution and skip tests if needed
                    sh "${mavenCMD} clean package -T 1C -DskipTests"
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up after build...'
            cleanWs() // Clean workspace after build
        }
    }
}

Pipeline - Stage 1 & Stage 2 & Stage 3
--------------------------------------------------
Note: Before writing stage 3, run the below commands in MobaXTerm
sudo visudo

Note: #Add the following line at the end of the file, assuming the Jenkins user is 'jenkins'
jenkins ALL=(ALL) NOPASSWD: /bin/cp


pipeline {
    agent any

    tools {
        maven 'maven3'
    }

    stages {
        stage('Clone the Code') {
            steps {
                git 'https://github.com/KastroVKiran/Netflix-Pipeline-Project.git'
            }
        }
        stage('Maven Build') {
            steps {
                script {
                    def mavenHome = tool name: 'maven3', type: 'maven'
                    def mavenCMD = "${mavenHome}/bin/mvn"
                    // Run Maven build with parallel execution and skip tests if needed
                    sh "${mavenCMD} clean package -T 1C -DskipTests"
                }
            }
        }
        stage('Deploy Stage') {
            steps {
                script {
                    // Ensure target directory exists before copying
                    sh 'ls -l target'
                    // Deploy the WAR file to Tomcat
                    sh 'sudo cp target/NETFLIX-1.2.2.war /home/ec2-user/apache-tomcat-9.0.98/webapps'
                }
            }
        }
    }

     post {
        always {
            echo 'Cleaning up after build...'
            cleanWs() // Clean workspace after build
        }
    }
}

============================================================================================================================================================================
===============================================================================================================================================================================
Master Node - t2.medium, 20 GB
Slave Nodes - t3.micro, 30 GB
--------------
DEMO
--------------
Connect to jenkins master node.

Launch one or two new instances (slave 1 and slave 2)

Connect to slave 1 in Moba
$ sudo yum install java-17-amazon-corretto-headless

Setup the slave server
--------------------------------
Jenkins Console ----> Manage jenkins ----> Nodes ----> New node ----> Name: Slave1, "Check" permanent agent ----> Create.

No. of executors: 3 (3 builds will execute parallelly) ----> Remote root directory: /tmp (It is a place where we want to store the build output. I want to store my output of my jenkins in 'tmp' folder) ----> Labels: slave1 ----> Usage: "Only build jobs with label expressions matching this node" (It means, if i give slave1 i.e label name:, then only it will build the job) ----> Launch method: Launch agents via SSH, Host: Private IP of slave1 VM, Credentials: Click on Add ----> Select 'Jenkins' ----> Domain Name: Global credentials, Kind: SSH Username with private key, Username: ec2-user, Private key: "Check" enter directly ----> Add: Paste the content in pem file that is used to launch the slave node ---> Add ----> Credentials: Select 'ec2-user'  ----> Host key verification strategy: non verifying verification strategy ----> Save. (Here we will give username and password for the server)

You can see the SLAVE 1

Create a job with git repo ----> Build steps: Invoke top level maven targets ----> Goals: clean package ----> Save ----> Apply

Click on Build Now ----> By default when we click on build now, the build gets saved on master node. To verify this, Click on build number ----> Console output ----> You can see "Building on the built-in node." Here 'built-in node' means master node.

The purpose of master and slave concept is, I want to build the jobs on worker/slave node, so that the load on master node will be reduced.

Connect to Worker Node 1 in Moba ----> cd /tmp/ ----> ls ----> You dont see the output
Connect to Master Node in Moba ----> cd /tmp/ ----> ls ----> You will see the output as 'workspace'

Lets see how to add slave-1, on which we need to do the builds
----------------------------------------------------------------------------
Goto the Job ----> Configure ----> General ----> "Check" Restrict where this project can be run  ----> Label expression: slave1 ----> Apply ----> Save.
Click on Build now.

But you will see the build failure.
This failure is because, we didnot install maven and git on slave1.

Connect to slave1 ----> (You are currently pointing to 'tmp' folder) ----> sudo yum install git -y ----> sudo yum install maven -y

Goto the Job ----> Click on Build Now ----> Click on build number ----> Console output ----> You can see "Building remotely on Slave1" and the path where the build got stored.

Goto the slave1 connected tab in Moba ----> cd tmp ----> ls ----> You will see "workspace" directory ----> cd workspace ----> ls ----> You will see the job name ----> cd <job-name> ----> ls ----> cd target ----> You will see the "war" file.

This is how we can reduce the load on master, by building the jobs on worker nodes.




pipeline {
    agent {
        label 'Slave1'
    }

    tools {
        maven 'maven3'
    }

    stages {
        stage('Clone the Code') {
            steps {
                git 'https://github.com/vk67220/Netflix-Pipeline-Project.git'
            }
        }

        stage('Maven Build') {
            steps {
                script {
                    def mavenHome = tool name: 'maven3', type: 'maven'
                    def mavenCMD = "${mavenHome}/bin/mvn"
                    sh "${mavenCMD} clean package -T 1C -DskipTests"
                }
            }
        }

        stage('Deploy to Tomcat on Master') {
            steps {
                sshagent(['71717927-287d-49a1-a3ad-f0362096874e']) {
                    script {
                        // Deploy the WAR file to the master node's Tomcat webapps folder
                        sh '''scp -o StrictHostKeyChecking=no target/NETFLIX-1.2.2.war ec2-user@18.226.165.119:/home/ec2-user/apache-tomcat-9.0.98/webapps/'''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            echo 'Cleaning up after build...'
            cleanWs()  // Clean workspace after build
        }
    }
}

Do below steps to perform the above script

Ensure the SSH Agent Plugin is installed:

Navigate to Manage Jenkins → Plugin Manager → Installed tab.

sudo chown -R ec2-user:ec2-user /home/ec2-user/apache-tomcat-9.0.98/webapps/
sudo chmod -R 755 /home/ec2-user/apache-tomcat-9.0.98/webapps/

Add ec2-user to the sudoers file for passwordless sudo access:
sudo visudo
ec2-user ALL=(ALL) NOPASSWD: ALL



pipeline {
    agent {
        label 'Slave1'
    }

    tools {
        maven 'maven3'
    }

    stages {
        stage('Clone the Code') {
            steps {
                git 'https://github.com/vk67220/Netflix-Pipeline-Project.git'
            }
        }

        stage('Maven Build') {
            steps {
                script {
                    def mavenHome = tool name: 'maven3', type: 'maven'
                    def mavenCMD = "${mavenHome}/bin/mvn"
                    sh "${mavenCMD} clean package -T 1C -DskipTests"
                }
            }
        }

        stage('Copy WAR to Local Tomcat') {
            steps {
                script {
                    sh '''
                    # Move the WAR file to Tomcat's webapps directory
                    TOMCAT_DIR="/home/ec2-user/apache-tomcat-9.0.98/webapps"
                    WAR_FILE="target/NETFLIX-1.2.2.war"

                    # Ensure the target directory exists
                    if [ ! -d "$TOMCAT_DIR" ]; then
                        echo "Error: Target Tomcat directory does not exist: $TOMCAT_DIR"
                        exit 1
                    fi

                    # Copy the WAR file
                    cp "$WAR_FILE" "$TOMCAT_DIR/"
                    echo "WAR file copied to Tomcat webapps directory successfully."
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            echo 'Cleaning up after build...'
            cleanWs()  // Clean workspace after build
        }
    }
}


Following steps to be done before build the job

sudo chown -R ec2-user:ec2-user /home/ec2-user/apache-tomcat-9.0.98/webapps
sudo chmod -R u+w /home/ec2-user/apache-tomcat-9.0.98/webapps
=============================================================================================================================================================================

Including sonarqube in pipelines


